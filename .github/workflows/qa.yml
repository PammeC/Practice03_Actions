name: QA Testing Pipeline

on:
  pull_request:
    branches:
      - qa  # Se ejecuta en cada PR hacia la rama "docker"

jobs:
  test:
    name: Run Tests in QA
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar Node.js (si usas Node.js para la app)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: npm install

      # Paso 4: Ejecutar pruebas automáticas
      - name: Run Tests
        run: npm test

      # Paso 5: Subir resultados de pruebas (opcional)
      - name: Upload Test Results
        if: always()  # Ejecuta esta acción incluso si las pruebas fallan
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  qa-deploy:
    name: Deploy to QA Environment
    runs-on: ubuntu-latest
    needs: test  # Solo se ejecuta si las pruebas pasan
    if: ${{ needs.test.result == 'success' }}

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar clave SSH para QA
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_QA_SSH_KEY }}" > qa_private.pem
          chmod 600 qa_private.pem

      # Paso 3: Desplegar la aplicación en el entorno de QA
      - name: Deploy to QA via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_QA_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_QA_SSH_KEY }}
          port: 22
          script: |
            # Detener contenedores existentes en QA
            sudo docker stop $(sudo docker ps -q) || true
            sudo docker rm $(sudo docker ps -aq) || true

            # Descargar y ejecutar la última imagen
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/hello-service:latest
            sudo docker run -d --name qa-hello-service -p 8082:5000 ${{ secrets.DOCKER_HUB_USERNAME }}/hello-service:latest

            # Limpiar imágenes no utilizadas
            sudo docker image prune -af
